{"version":3,"sources":["webpack:///./src/pages/thanks.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/images/color-logo.png","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/static/meta.jpg","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Seo/Seo.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_components_Seo_Seo__WEBPACK_IMPORTED_MODULE_1__","_images_color_logo_png__WEBPACK_IMPORTED_MODULE_2__","_images_color_logo_png__WEBPACK_IMPORTED_MODULE_2___default","n","ThanksPage","props","keywords","meta","name","content","className","alt","src","ColorLogo","href","m","module","exports","require","default","p","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","createElement","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","StaticQueryContext","createContext","StaticQuery","react_default","a","Consumer","staticQueryData","data","query","render","children","object","func","SEO","description","lang","_ref$meta","title","react","gatsby_browser_entry_StaticQuery","detailsQuery","metaDescription","site","siteMetadata","metaTitle","image","previewImage","Helmet_default","htmlAttributes","titleTemplate","property","author","concat","length","join","rel","_1025518380","defaultProps"],"mappings":"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","file":"component---src-pages-thanks-tsx-aa2d47c92f1e136372ce.js","sourcesContent":["import * as React from 'react';\n\nimport SEO from '../components/Seo/Seo';\nimport ColorLogo from '../images/color-logo.png';\n\nconst ThanksPage: React.SFC<{}> = (props): JSX.Element => {\n    return (\n        <>\n            <SEO\n                keywords={[]}\n                meta={[{\n                    name: 'robots',\n                    content: 'noindex',\n                }]}\n            />\n\n            <section className=\"main-screen thank-you\">\n                <div className=\"container\">\n\n                    <div className=\"main-screen-content\">\n                        <img alt=\"Revat\" src={ColorLogo} />\n\n                        <div className='message-wrapper'>\n                            <h1>Дякуєм за заповнення форми для першого тренування.</h1>\n                            <p>Ми цінуємо ваш інтерес і хочемо, щоб ваш досвід був якнайкращим.</p>\n                            <br />\n                            <p>Наша команда зв'яжеться з вами для надання додаткової інформації і підтвердження дати та часу тренування.</p>\n                            <br />\n                            <p>Що з собою потрібно мати ?</p>\n                            <ul>\n                                <li>- зручну спортивну форму і змінне взуття а також рушник/тапочки якщо захочете в душ</li>\n                                <li>- воду та інші атрибути ви зможете придбати у нас на рецепції</li>\n                            </ul>\n                            <br />\n                            <p>Якщо у вас є будь-які інші питання або побажання, будь ласка, не соромтеся звернутися до нас.</p>\n                            <br />\n                        </div>\n                        <a href=\"/\" className=\"button\">\n                            <span>На головну</span>\n                            <span className=\"tail\"></span>\n                        </a>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default ThanksPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","module.exports = __webpack_public_path__ + \"static/color-logo-27ab946089ad1fb9804b8c08e21567df.png\";","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","module.exports = __webpack_public_path__ + \"static/meta-82736bf0e3227fa3afac26c668d0e450.jpg\";","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport previewImage from '../../static/meta.jpg'\n\nimport { SeoProps } from './index'\n\nimport '../../styles/styles.scss'\n\nconst SEO: React.FunctionComponent<SeoProps> = ({\n  description,\n  lang,\n  meta = [],\n  keywords,\n  title,\n}): JSX.Element => (\n  <StaticQuery\n    query={detailsQuery}\n    render={data => {\n      const metaDescription = description || data.site.siteMetadata.description\n      const metaTitle = title || data.site.siteMetadata.title\n      const image = `https://revat-meta.netlify.com${previewImage}`\n\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang,\n          }}\n          title={metaTitle}\n          titleTemplate={`%s`}\n          meta={[\n            {\n              name: 'description',\n              content: metaDescription,\n            },\n            {\n              name: 'name',\n              content: metaTitle,\n            },\n            {\n              name: 'image',\n              content: image,\n            },\n            {\n              property: 'og:title',\n              content: metaTitle,\n            },\n            {\n              property: 'og:description',\n              content: metaDescription,\n            },\n            {\n              property: 'og:type',\n              content: 'website',\n            },\n            {\n              property: 'og:image',\n              content: image,\n            },\n            {\n              name: 'twitter:card',\n              content: 'Teonica web agency',\n            },\n            {\n              name: 'twitter:creator',\n              content: data.site.siteMetadata.author,\n            },\n            {\n              name: 'twitter:title',\n              content: metaTitle,\n            },\n            {\n              name: 'twitter:description',\n              content: metaDescription,\n            },\n            {\n              name: 'twitter:image',\n              content: image,\n            },\n          ]\n            .concat(\n              keywords.length > 0\n                ? {\n                    name: 'keywords',\n                    content: keywords.join(', '),\n                  }\n                : []\n            )\n            .concat(meta)}\n        >\n          <link\n            href=\"https://fonts.googleapis.com/css?family=Montserrat:400,500,600,700,900\"\n            rel=\"stylesheet\"\n          />\n        </Helmet>\n      )\n    }}\n  />\n)\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [''],\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}